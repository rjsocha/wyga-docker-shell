#!/bin/bash
set -euo pipefail
[[ -f config.ci ]] && source config.ci || true

registry_login() {
  local registry="${1}"
  local login="${2}"
  local password="${3}"
  printf "REGISTRY: %s\n" "${registry:-docker.io}"
  printf -- "${password}" | \
  if ! docker login -u "${login}" --password-stdin "${registry}" &>/dev/null
  then
    printf -- "  UNABLE TO LOGIN ...\n"
    exit 200
  fi
}

if [[ -n ${CI_REGISTRY:-} ]] && [[ -n ${CI_REGISTRY_PASSWORD:-} ]]
then
  registry_login "${CI_REGISTRY}" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}"
fi

if [[ -n ${DOCKER_IO_USER:-} ]] && [[ -n ${DOCKER_IO_TOKEN:-} ]] && [[ -z ${NO_DOCKER_IO:-} ]]
then
  registry_login "" "${DOCKER_IO_USER}" "${DOCKER_IO_TOKEN}"
fi

if [[ -n "${CI_DEPENDENCY_PROXY_SERVER:-}" ]] && [[ -n ${CI_DEPENDENCY_PROXY_PASSWORD:-} ]] && [[ -n ${ENABLE_DEPENDENCY_PROXY:-} ]]
then
  registry_login "${CI_DEPENDENCY_PROXY_SERVER}" "${CI_DEPENDENCY_PROXY_USER}" "${CI_DEPENDENCY_PROXY_PASSWORD}"
fi

if [[ -n ${DOCKER_BUILDER:-} ]]
then
  if [[ -d /site/builder ]]; then
    RUNNER_CONFIG="/site"
    eval $(ssh-agent -s)
    if [[ -s ${RUNNER_CONFIG}/ssh/ssh_known_hosts ]]; then
      cp "${RUNNER_CONFIG}/ssh/ssh_known_hosts" /etc/ssh/ssh_known_hosts
    fi
    docker buildx inspect "${DOCKER_BUILDER}" --bootstrap &>/dev/null || docker buildx create --use --bootstrap --name "${DOCKER_BUILDER}" --platform linux/amd64 dind &>/tmp/create.log || { cat /tmp/create.log; exit 100; }
    for platform in $(find "${RUNNER_CONFIG}/builder" -maxdepth 1 -mindepth 1 -type d -printf "%f\n"); do
      node=1
      for uri in $(find "${RUNNER_CONFIG}/builder/${platform}" -maxdepth 1 -mindepth 1 -type f -printf "%f\n"); do
        [[ ${uri} =~ @ ]] || continue
        [[ -s ${RUNNER_CONFIG}/builder/${platform}/${uri} ]] || continue
        ssh-add -q "${RUNNER_CONFIG}/builder/${platform}/${uri}"
        docker context create "node-${platform}-${node}" --docker "host=ssh://${uri}"
        docker buildx create --append --name "${DOCKER_BUILDER}" --platform "linux/${platform}" "node-${platform}-${node}"
        ((node++)) || true
      done
    done
    ssh-add -L
    docker context ls
    docker buildx ls
    printf -- "BUILDER/NATIVE: %s\n" "${DOCKER_BUILDER}"
  else
    docker run --quiet --privileged --rm tonistiigi/binfmt --install all &>/dev/null
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes -c yes
    docker buildx inspect "${DOCKER_BUILDER}" --bootstrap &>/dev/null || docker buildx create --use --bootstrap --name "${DOCKER_BUILDER}" &>/dev/null
    printf -- "BUILDER: %s\n" "${DOCKER_BUILDER}"
  fi
fi
